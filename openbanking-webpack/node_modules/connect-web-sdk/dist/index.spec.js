"use strict";

var _index = require("./index");

var _constants = require("./constants");

var defaultPopupOptions = {
  width: _constants.CONNECT_POPUP_HEIGHT,
  height: _constants.CONNECT_POPUP_WIDTH,
  top: window.top.outerHeight / 2 + window.top.screenY - _constants.CONNECT_POPUP_HEIGHT / 2,
  left: window.top.outerWidth / 2 + window.top.screenX - _constants.CONNECT_POPUP_WIDTH / 2
};
var url = 'http://test.com';
describe('Connect', function () {
  var mockWindow;
  beforeEach(function () {
    mockWindow = {
      close: jest.fn(),
      focus: jest.fn(),
      closed: false,
      postMessage: jest.fn()
    };
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.resetAllMocks();

    _index.Connect.destroy();
  });
  test('should apply iframe styles', function () {
    var styles = document.getElementById(_constants.STYLES_ID);
    expect(styles.id).toBe(_constants.STYLES_ID);
    expect(styles.innerHTML).toBe("#".concat(_constants.IFRAME_ID, " {\n      position: absolute;\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n      z-index: 10;\n      background: rgba(0,0,0,0.8);\n    }"));
  });
  describe('destroy', function () {
    test('should remove iframe and meta elements', function () {
      var iframeStub = {
        parentNode: {
          removeChild: jest.fn()
        },
        setAttribute: jest.fn()
      };
      var metaStub = {
        parentNode: {
          removeChild: jest.fn()
        },
        setAttribute: jest.fn()
      };
      spyOn(document.head, 'appendChild').and.callFake(function () {});
      spyOn(document.body, 'appendChild').and.callFake(function () {});
      spyOn(window.document, 'createElement').and.callFake(function (element) {
        return element === 'iframe' ? iframeStub : metaStub;
      });
      jest.spyOn(window, 'removeEventListener');

      _index.Connect.launch(url, {
        onDone: function onDone() {},
        onError: function onError() {},
        onCancel: function onCancel() {}
      });

      _index.Connect.destroy();

      expect(iframeStub.parentNode.removeChild).toHaveBeenCalled();
      expect(metaStub.parentNode.removeChild).toHaveBeenCalled();
    });
    test('should remove postMessage event listener', function () {
      var onMessageFn;

      window.addEventListener = function (cb) {
        onMessageFn = cb;
      };

      jest.spyOn(window, 'removeEventListener');

      _index.Connect.launch(url, {
        onDone: function onDone() {},
        onError: function onError() {},
        onCancel: function onCancel() {}
      });

      _index.Connect.destroy();

      expect(window.removeEventListener).toHaveBeenCalledWith('message', onMessageFn);
    });
    test('should close popup window', function () {
      spyOn(window, 'open').and.returnValue(mockWindow);

      _index.Connect.launch(url, {
        onDone: function onDone() {},
        onError: function onError() {},
        onCancel: function onCancel() {}
      }, {
        popup: true
      });

      _index.Connect.destroy();

      expect(mockWindow.close).toHaveBeenCalled();
    });
  });
  describe('launch', function () {
    test('should handle popup scenario with default options', function () {
      spyOn(window, 'open').and.returnValue(mockWindow);
      var onLoad = jest.fn();
      spyOn(_index.Connect, 'initPostMessage').and.callFake(function () {});

      _index.Connect.launch(url, {
        onDone: function onDone() {},
        onError: function onError() {},
        onCancel: function onCancel() {},
        onLoad: onLoad
      }, {
        popup: true
      });

      expect(window.open).toHaveBeenCalledWith(url, 'targetWindow', "toolbar=no,location=no,status=no,menubar=no,width=720,height=520,top=24,left=252");
      expect(onLoad).toHaveBeenCalled();
      expect(_index.Connect.initPostMessage).toHaveBeenCalled();
    });
    test('should handle popup scenario with specified options', function () {
      spyOn(window, 'open').and.returnValue(mockWindow);
      var popupOptions = {
        width: 100,
        height: 100,
        top: 200,
        left: 200
      };
      var onLoad = jest.fn();
      spyOn(_index.Connect, 'initPostMessage').and.callFake(function () {});

      _index.Connect.launch(url, {
        onDone: function onDone() {},
        onError: function onError() {},
        onCancel: function onCancel() {},
        onLoad: onLoad
      }, {
        popup: true,
        popupOptions: popupOptions
      });

      expect(onLoad).toHaveBeenCalled();
      expect(window.open).toHaveBeenCalledWith(url, 'targetWindow', "toolbar=no,location=no,status=no,menubar=no,width=".concat(popupOptions.width, ",height=").concat(popupOptions.height, ",top=").concat(popupOptions.top, ",left=").concat(popupOptions.left));
      expect(_index.Connect.initPostMessage).toHaveBeenCalled();
    });
    test('should return error event if popup failed to open', function () {
      spyOn(window, 'open').and.returnValue(undefined);
      var onError = jest.fn();

      _index.Connect.launch(url, {
        onDone: function onDone() {},
        onError: onError,
        onCancel: function onCancel() {}
      }, {
        popup: true
      });

      expect(window.open).toHaveBeenCalled();
      expect(onError).toHaveBeenCalledWith({
        reason: 'error',
        code: 1403
      });
    });
    test('should handle iframe scenario with no overrides', function () {
      spyOn(document, 'querySelectorAll').and.callThrough();
      var iframeStub = {
        parentNode: {
          removeChild: jest.fn()
        },
        setAttribute: jest.fn()
      };
      var metaStub = {
        parentNode: {
          removeChild: jest.fn()
        },
        setAttribute: jest.fn()
      };
      spyOn(document.head, 'appendChild').and.callFake(function () {});
      spyOn(document.body, 'appendChild').and.callFake(function () {});
      spyOn(window.document, 'createElement').and.callFake(function (element) {
        return element === 'iframe' ? iframeStub : metaStub;
      });
      var onLoad = jest.fn();
      spyOn(_index.Connect, 'initPostMessage').and.callFake(function () {});

      _index.Connect.launch(url, {
        onDone: function onDone() {},
        onError: function onError() {},
        onCancel: function onCancel() {},
        onLoad: onLoad
      });

      expect(document.querySelectorAll).toHaveBeenCalledWith('meta[name="viewport"]');
      expect(document.createElement).toHaveBeenCalledWith('meta');
      expect(metaStub.setAttribute).toHaveBeenCalledWith('name', 'viewport');
      expect(metaStub.setAttribute).toHaveBeenCalledWith('content', 'initial-scale=1');
      expect(document.head.appendChild).toHaveBeenCalledWith(metaStub);
      expect(document.createElement).toHaveBeenCalledWith('iframe');
      expect(iframeStub.src).toBe(url);
      expect(iframeStub.setAttribute).toHaveBeenCalledWith('id', _constants.IFRAME_ID);
      expect(iframeStub.setAttribute).toHaveBeenCalledWith('frameborder', '0');
      expect(iframeStub.setAttribute).toHaveBeenCalledWith('scrolling', 'no');
      expect(document.body.appendChild).toHaveBeenCalledWith(iframeStub);
      iframeStub.onload();
      expect(_index.Connect.initPostMessage).toHaveBeenCalledWith({});
      expect(onLoad).toHaveBeenCalled();
    });
    test('should handle iframe scenario with custom overlay and container', function () {
      var mockContainer = {
        appendChild: jest.fn()
      };
      var options = {
        overlay: 'gray',
        selector: '#container'
      };
      spyOn(document, 'querySelectorAll').and.callThrough();
      spyOn(document, 'querySelector').and.returnValue(mockContainer);
      var iframeStub = {
        parentNode: {
          removeChild: jest.fn()
        },
        setAttribute: jest.fn()
      };
      var metaStub = {
        parentNode: {
          removeChild: jest.fn()
        },
        setAttribute: jest.fn()
      };
      spyOn(document.head, 'appendChild').and.callFake(function () {});
      spyOn(document.body, 'appendChild').and.callFake(function () {});
      spyOn(window.document, 'createElement').and.callFake(function (element) {
        return element === 'iframe' ? iframeStub : metaStub;
      });
      var onLoad = jest.fn();
      spyOn(_index.Connect, 'initPostMessage').and.callFake(function () {});

      _index.Connect.launch(url, {
        onDone: function onDone() {},
        onError: function onError() {},
        onCancel: function onCancel() {},
        onLoad: onLoad
      }, options);

      expect(iframeStub.setAttribute).toHaveBeenCalledWith('style', 'background: gray;');
      expect(document.querySelector).toHaveBeenCalledWith('#container');
      expect(mockContainer.appendChild).toHaveBeenCalledWith(iframeStub);
      iframeStub.onload();
      expect(_index.Connect.initPostMessage).toHaveBeenCalledWith(options);
      expect(onLoad).toHaveBeenCalled();
    });
    test('should handle iframe scenario with custom container as node', function () {
      var mockContainer = {
        appendChild: jest.fn()
      };
      var options = {
        node: mockContainer
      };
      var iframeStub = {
        parentNode: {
          removeChild: jest.fn()
        },
        setAttribute: jest.fn()
      };
      var metaStub = {
        parentNode: {
          removeChild: jest.fn()
        },
        setAttribute: jest.fn()
      };
      spyOn(document.head, 'appendChild').and.callFake(function () {});
      spyOn(window.document, 'createElement').and.callFake(function (element) {
        return element === 'iframe' ? iframeStub : metaStub;
      });
      var onLoad = jest.fn();
      spyOn(_index.Connect, 'initPostMessage').and.callFake(function () {});

      _index.Connect.launch(url, {
        onDone: function onDone() {},
        onError: function onError() {},
        onCancel: function onCancel() {},
        onLoad: onLoad
      }, options);

      expect(mockContainer.appendChild).toHaveBeenCalledWith(iframeStub);
      iframeStub.onload();
      expect(_index.Connect.initPostMessage).toHaveBeenCalledWith(options);
      expect(onLoad).toHaveBeenCalled();
    });
    test("should log warning and append iframe to body if selector doesn't return an element", function () {
      spyOn(console, 'warn').and.callFake(function () {});
      var options = {
        selector: '#container'
      };
      spyOn(document, 'querySelectorAll').and.callThrough();
      spyOn(document, 'querySelector').and.returnValue(undefined);
      var iframeStub = {
        parentNode: {
          removeChild: jest.fn()
        },
        setAttribute: jest.fn()
      };
      var metaStub = {
        parentNode: {
          removeChild: jest.fn()
        },
        setAttribute: jest.fn()
      };
      spyOn(document.head, 'appendChild').and.callFake(function () {});
      spyOn(document.body, 'appendChild').and.callFake(function () {});
      spyOn(window.document, 'createElement').and.callFake(function (element) {
        return element === 'iframe' ? iframeStub : metaStub;
      });
      var onLoad = jest.fn();
      spyOn(_index.Connect, 'initPostMessage').and.callFake(function () {});

      _index.Connect.launch(url, {
        onDone: function onDone() {},
        onError: function onError() {},
        onCancel: function onCancel() {},
        onLoad: onLoad
      }, options);

      expect(document.querySelector).toHaveBeenCalledWith('#container');
      expect(document.body.appendChild).toHaveBeenCalledWith(iframeStub);
      expect(console.warn).toHaveBeenCalledWith("Couldn't find any elements matching \"".concat(options.selector, "\", appending \"iframe\" to \"body\" instead."));
    });
    test('should throw error if launch is called again before calling destroy', function () {
      _index.Connect.launch(url, {
        onDone: function onDone() {},
        onError: function onError() {},
        onCancel: function onCancel() {}
      });

      try {
        _index.Connect.launch(url, {
          onDone: function onDone() {},
          onError: function onError() {},
          onCancel: function onCancel() {}
        });
      } catch (e) {
        expect(e.message).toBe('You must destroy the iframe before you can open a new one. Call "destroy()"');
      }
    });
  });
  describe('initPostMessage', function () {
    test('should call postMessage every second with the expected parameters and attach postMessage event handler', function () {
      spyOn(window, 'setInterval').and.callThrough();
      spyOn(_index.Connect, 'postMessage').and.callFake(function () {});

      _index.Connect.initPostMessage({
        selector: '#container'
      });

      jest.advanceTimersByTime(1100);
      expect(_index.Connect.postMessage).toHaveBeenCalledWith({
        type: _constants.PING_EVENT,
        selector: '#container',
        sdkVersion: _constants.CONNECT_SDK_VERSION,
        platform: _constants.PLATFORM_IFRAME
      });

      _index.Connect.initPostMessage({
        popup: true
      });

      jest.advanceTimersByTime(1100);
      expect(_index.Connect.postMessage).toHaveBeenCalledWith({
        type: _constants.PING_EVENT,
        selector: undefined,
        sdkVersion: _constants.CONNECT_SDK_VERSION,
        platform: _constants.PLATFORM_POPUP
      });
    });
    test('should call attach postMessage event handler and send events as expected', function () {
      var eventHandler;
      var popupMock = {
        close: jest.fn(),
        focus: jest.fn()
      };
      spyOn(window, 'open').and.callFake(jest.fn().mockReturnValue(popupMock));
      spyOn(window, 'addEventListener').and.callFake(function (eventType, eh) {
        return eventHandler = eh;
      });
      var eventHandlers = {
        onDone: jest.fn(),
        onError: jest.fn(),
        onCancel: jest.fn()
      };

      _index.Connect.launch(url, eventHandlers);

      _index.Connect.initPostMessage({
        selector: '#container'
      });

      expect(window.addEventListener).toHaveBeenCalled();
      spyOn(window, 'clearInterval');
      eventHandler({
        origin: url,
        data: {
          type: _constants.ACK_EVENT
        }
      });
      expect(window.clearInterval).toHaveBeenCalled();
      spyOn(_index.Connect, 'openPopupWindow').and.callThrough();
      spyOn(_index.Connect, 'destroy');
      eventHandler({
        origin: url,
        data: {
          type: _constants.URL_EVENT,
          url: 'http://oauth.com'
        }
      });
      expect(_index.Connect.openPopupWindow).toHaveBeenCalledWith('http://oauth.com');
      var payload = {
        test: true
      };
      eventHandler({
        origin: url,
        data: {
          type: _constants.DONE_EVENT,
          data: payload
        }
      });
      expect(eventHandlers.onDone).toHaveBeenCalledWith(payload);
      expect(_index.Connect.destroy).toHaveBeenCalledTimes(1);
      eventHandler({
        origin: url,
        data: {
          type: _constants.CANCEL_EVENT,
          data: payload
        }
      });
      expect(eventHandlers.onCancel).toHaveBeenCalledWith(payload);
      expect(_index.Connect.destroy).toHaveBeenCalledTimes(2);
      eventHandler({
        origin: url,
        data: {
          type: _constants.ERROR_EVENT,
          data: payload
        }
      });
      expect(eventHandlers.onCancel).toHaveBeenCalledWith(payload);
      expect(_index.Connect.destroy).toHaveBeenCalledTimes(3);
      eventHandler({
        origin: url,
        data: {
          type: _constants.ROUTE_EVENT,
          data: payload
        }
      });
      expect(eventHandlers.onCancel).toHaveBeenCalledWith(payload);
      expect(_index.Connect.destroy).toHaveBeenCalledTimes(3);
      eventHandler({
        origin: url,
        data: {
          type: _constants.USER_EVENT,
          data: payload
        }
      });
      expect(eventHandlers.onCancel).toHaveBeenCalledWith(payload);
      expect(_index.Connect.destroy).toHaveBeenCalledTimes(3);
      eventHandler({
        origin: url,
        data: {
          type: _constants.CLOSE_POPUP_EVENT,
          data: payload
        }
      });
      expect(popupMock.close).toHaveBeenCalled();
      expect(_index.Connect.destroy).toHaveBeenCalledTimes(3);
    });
    test('should call attach postMessage event handler and ping Connect indefinitely for popup scenario', function () {
      var eventHandler;
      spyOn(window, 'open').and.callFake(function () {
        return mockWindow;
      });
      spyOn(window, 'addEventListener').and.callFake(function (eventType, eh) {
        return eventHandler = eh;
      });
      var eventHandlers = {
        onDone: jest.fn(),
        onError: jest.fn(),
        onCancel: jest.fn()
      };

      _index.Connect.launch(url, eventHandlers, {
        popup: true
      });

      _index.Connect.initPostMessage({
        popup: true
      });

      expect(window.addEventListener).toHaveBeenCalled();
      spyOn(window, 'clearInterval');
      eventHandler({
        origin: url,
        data: {
          type: _constants.ACK_EVENT
        }
      });
      expect(window.clearInterval).not.toHaveBeenCalled();
    });
  });
  describe('openPopupWindow', function () {
    test("should open popup window, focus on it and periodically watch if it's still open", function () {
      spyOn(window, 'open').and.callFake(function () {
        return mockWindow;
      });
      spyOn(window, 'setInterval');
      spyOn(window, 'clearInterval');
      spyOn(_index.Connect, 'postMessage').and.callFake(function () {});

      _index.Connect.openPopupWindow(url);

      expect(window.open).toHaveBeenCalledWith(url, 'targetWindow', "toolbar=no,location=no,status=no,menubar=no,width=".concat(_constants.POPUP_WIDTH, ",height=").concat(_constants.POPUP_HEIGHT, ",top=84,left=212"));
      expect(mockWindow.focus).toHaveBeenCalled();
      expect(window.setInterval).toHaveBeenCalled();
      jest.advanceTimersByTime(1100);
      expect(window.clearInterval).not.toHaveBeenCalled();
    });
    test('should call postMessage when the popup is closed', function () {
      mockWindow.closed = true;
      spyOn(window, 'open').and.callFake(function () {
        return mockWindow;
      });
      spyOn(window, 'setInterval').and.callThrough();
      spyOn(window, 'clearInterval');
      spyOn(_index.Connect, 'postMessage').and.callFake(function () {});

      _index.Connect.openPopupWindow(url);

      expect(window.open).toHaveBeenCalledWith(url, 'targetWindow', "toolbar=no,location=no,status=no,menubar=no,width=".concat(_constants.POPUP_WIDTH, ",height=").concat(_constants.POPUP_HEIGHT, ",top=84,left=212"));
      expect(mockWindow.focus).toHaveBeenCalled();
      expect(window.setInterval).toHaveBeenCalled();
      jest.advanceTimersByTime(1100);
      expect(window.clearInterval).toHaveBeenCalled();
      expect(_index.Connect.postMessage).toHaveBeenCalledWith({
        type: _constants.WINDOW_EVENT,
        closed: true,
        blocked: false
      });
    });
    test('should let Connect know if the popup was blocked', function () {
      spyOn(window, 'open').and.callFake(function () {
        return undefined;
      });
      spyOn(_index.Connect, 'postMessage').and.callFake(function () {});

      _index.Connect.openPopupWindow(url);

      expect(window.open).toHaveBeenCalledWith(url, 'targetWindow', "toolbar=no,location=no,status=no,menubar=no,width=".concat(_constants.POPUP_WIDTH, ",height=").concat(_constants.POPUP_HEIGHT, ",top=84,left=212"));
      expect(mockWindow.focus).not.toHaveBeenCalled();
      expect(_index.Connect.postMessage).toHaveBeenCalledWith({
        type: _constants.WINDOW_EVENT,
        closed: true,
        blocked: true
      });
    });
  });
  describe('postMessage', function () {
    test('should call postMessage on (iframe)', function () {
      var iframeStub = {
        parentNode: {
          removeChild: jest.fn()
        },
        setAttribute: jest.fn(),
        contentWindow: {
          postMessage: jest.fn()
        }
      };
      var metaStub = {
        parentNode: {
          removeChild: jest.fn()
        },
        setAttribute: jest.fn()
      };
      spyOn(document.head, 'appendChild').and.callFake(function () {});
      spyOn(document.body, 'appendChild').and.callFake(function () {});
      spyOn(window.document, 'createElement').and.callFake(function (element) {
        return element === 'iframe' ? iframeStub : metaStub;
      });

      _index.Connect.launch(url, {
        onDone: function onDone() {},
        onError: function onError() {},
        onCancel: function onCancel() {}
      });

      iframeStub.onload();
      var data = {
        test: true
      };

      _index.Connect.postMessage(data);

      expect(iframeStub.contentWindow.postMessage).toHaveBeenCalledWith(data, url);
    });
    test('should call postMessage on (popup)', function () {
      spyOn(window, 'open').and.returnValue(mockWindow);

      _index.Connect.launch(url, {
        onDone: function onDone() {},
        onError: function onError() {},
        onCancel: function onCancel() {}
      }, {
        popup: true
      });

      var data = {
        test: true
      };

      _index.Connect.postMessage(data);

      expect(mockWindow.postMessage).toHaveBeenCalledWith(data, url);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,